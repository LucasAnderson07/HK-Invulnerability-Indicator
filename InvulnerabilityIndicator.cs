using Modding;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace InvulnerabilityIndicator {
    public class InvulnerabilityIndicator: Mod, ITogglableMod {
        internal static InvulnerabilityIndicator instance;

        public InvulnerabilityIndicator() : base("Invulnerability Indicator") {
           instance = this;
        }

        public override void Initialize() {
            Log("Initializing");

            ModHooks.HeroUpdateHook += PollForKnight;
            UnityEngine.SceneManagement.SceneManager.activeSceneChanged += SceneChanged;

            Log("Initialized");
        }

        public override string GetVersion() => GetType().Assembly.GetName().Version.ToString();

        public void SceneChanged(Scene _, Scene to) {
            if (to.name == Constants.MENU_SCENE) {
                ModHooks.HeroUpdateHook += PollForKnight;
            }
        }

        public void Unload() {
            Indicator indicator = GameObject.Find("Knight")?.GetComponent<Indicator>();
            if (indicator) {
                indicator.Unload();
                GameObject.DestroyImmediate(indicator);
            }
            ModHooks.HeroUpdateHook -= PollForKnight;
            UnityEngine.SceneManagement.SceneManager.activeSceneChanged += SceneChanged;
        }

        private static void PollForKnight() {
            GameObject knight = GameObject.Find("Knight");

            if (knight != null) {
                knight.AddComponent<Indicator>();
                ModHooks.HeroUpdateHook -= PollForKnight;
            }
        }
    }
}